
enum WordStatus {
  NONE
  OPEN
  VOTING
  CLOSED
}

type Player {
  id: ID!
  name: String!
  color: String!
}

type Definition {
  id: ID!
  text: String!
  author: ID!
  votes: [ID!]
}

type Word {
  id: ID!
  text: String!
  author: ID!
  committee: [ID!]
  definitions: [Definition!]
  status_override: WordStatus
}

type Session 
@model (subscriptions: null)
@key(name: "tag", fields: ["tag"], queryField: "sessionByTag")
@auth (rules: [
  { allow: public }
])
{
  id: ID!
  tag: String!
  players: [Player!]
  words: [Word!]
}

type Subscription {
  onCreateSession(id: ID): Session @aws_subscribe(mutations: ["createSession"])
  onUpdateSession(id: ID): Session @aws_subscribe(mutations: ["updateSession"])
  onDeleteSession(id: ID): Session @aws_subscribe(mutations: ["deleteSession"])
}
